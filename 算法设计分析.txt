题目要求如何选择装入背包中的物品，使得装入背包中物品的总价值最大，求出其最优值及最优解，要求要在满足它的属性的情况下。
以一个例子作为测试
6 10 38  //6个物品 10个约束 最大值3800
100 600 1200 2400 500 200//物品价值
8 12 13 64 22 41 //6个物品的第一个属性加起来不超过第一个约束80
8 12 13 75 22 41 //6个物品的第二个属性加起来不超过第二个约束96
3 6 4 18 6 4//6个物品的第三个属性加起来不超过第三个约束20
5 10 8 32 6 12//6个物品的第四个属性加起来不超过第四个约束36
5 13 8 42 6 20//6个物品的第五个属性加起来不超过第五个约束44
5 13 8 42 6 20//6个物品的第六个属性加起来不超过第六个约束48
0 0 0 0 8 0//6个物品的第七个属性加起来不超过第七个约束10
3 0 4 0 8 0//6个物品的第八个属性加起来不超过第八个约束18
3 2 4 0 8 4//6个物品的第九个属性加起来不超过第九个约束22
3 2 4 8 8 4//6个物品的第十个属性加起来不超过第十个约束24
80 96 20 36 44 48 10 18 22 24//10个约束
主伪代码为：int main()
MaxWorth <― 0
for i <― 0 to 64
    sumWorth <― 0
    n <― 0
for j <― 0 to 10
for k <― 0 to 6
  if array[i][k] <―  1
     result[j] <― result[j] +property[j][k]
  else if array[i][j] <― 0
            result[j]<―  0+result[j]
if (result[0] < restraint[0] &&
for k <― 0 to 6
   if array[i][k] <― 1
     sumWorth <―  worth[k]+sumWorth 
     outArry[k] <―  1
   else
      outArry[k] <―  0
else
	sumWorth <―   0	
			
if (MaxWorth < sumWorth
MaxWorth <―   sumWorth;
			x[0]  <― outArry[0];
			x[1]  <― outArry[1];
			x[2] <―  outArry[2];
			x[3] <―  outArry[3];
			x[4] <―  outArry[4];
			x[5]  <―  outArry[5];
printf(" 物品价值 %d\n", worth[i]);
printf("最优解：%d %d %d %d %d %d \n", x[0], x[1], x[2], x[3], x[4], x[5]);
printf("最优解的价值：\n");
printf("最优值：%d \n", MaxWorth);
	system("pause");
	return 0;		         
算法时间复杂度分析
createArray()其复杂度为o(n^3)
void initData()其复杂度为o(n^3)
int* IntToBiary()其复杂度为o(n)
void createArray()其复杂度为o(n^2)
所以此程序的时间复杂度为o(n^3)